<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="description" content="http://x13home.github.io/" />
  <title>X13.Home</title>
  <link rel="stylesheet" href="/css/style.min.css" />
</head>
<body>
  <div id="tree" />
  <script src="/js/jquery-2.1.4.min.js"></script>
  <script src="/js/jstree.min.js"></script>
  <script src="/js/socket.io.js"></script>
  <script src="/js/apiv04.js"></script>
  <script>
    $.jstree.defaults.contextmenu.items = function (o, cb) { // Could be an object directly
      return {
        "cut": {
          "separator_before": false,
          "separator_after": false,
          "label": "Cut",
          "action": function (data) {
            var inst = $.jstree.reference(data.reference),
                obj = inst.get_node(data.reference);
            if (inst.is_selected(obj)) {
              inst.cut(inst.get_top_selected());
            }
            else {
              inst.cut(obj);
            }
          }
        },
        "copy": {
          "separator_before": false,
          "icon": false,
          "separator_after": false,
          "label": "Copy",
          "action": function (data) {
            var inst = $.jstree.reference(data.reference),
                obj = inst.get_node(data.reference);
            if (inst.is_selected(obj)) {
              inst.copy(inst.get_top_selected());
            }
            else {
              inst.copy(obj);
            }
          }
        },
        "paste": {
          "separator_before": false,
          "separator_after": true,
          "icon": false,
          "_disabled": function (data) {
            return !$.jstree.reference(data.reference).can_paste();
          },
          "label": "Paste",
          "action": function (data) {
            var inst = $.jstree.reference(data.reference),
                obj = inst.get_node(data.reference);
            inst.paste(obj);
          }
        },
        "create": {
          "separator_before": false,
          "separator_after": false,
          "_disabled": false, //(this.check("create_node", data.reference, {}, "last")),
          "label": "Create",
          "action"			: function (data) {
            var inst = $.jstree.reference(data.reference),
                obj = inst.get_node(data.reference);
            inst.create_node(obj, { 'id': obj.id + "/" + Math.random().toString(36).slice(2), 'text': "" }, "last", function (new_node) {
              setTimeout(function () { inst.edit(new_node); },0);
            });
          /*
          "action": function (data) {
            var inst = $.jstree.reference(data.reference),
                obj = inst.get_node(data.reference);
            inst.create_node(obj, { 'id': obj.id + "/" + Math.random().toString(36).slice(2), 'text': "" }, "last", function (new_node) {
              setTimeout(function () {
                inst.edit(new_node, "", function (tmp, nv, cancel) {
                  var nid=tmp.parent + "/" + tmp.text;
                  inst.set_id(tmp, nid);
                  if (tmp.text!="" && nv && !cancel) {
                    API.socket.emit(8, nid, function (succes) {
                      if(succes != true) {
                        inst.delete_node(nid);
                      }
                    });
                  } else {
                    inst.delete_node(nid);
                  }
                }); }, 0);
            });*/
          }
        },
        "remove": {
          "separator_before": false,
          "icon": false,
          "separator_after": false,
          "_disabled": false, //(this.check("delete_node", data.reference, this.get_parent(data.reference), "")),
          "label": "Delete",
          "action"			: function (data) {
            var inst = $.jstree.reference(data.reference),
                obj = inst.get_node(data.reference);
            if(inst.is_selected(obj)) {
              inst.delete_node(inst.get_selected());
            }
            else {
              inst.delete_node(obj);
            }
          }
          /*
          "action": function (data) {
            var inst = $.jstree.reference(data.reference),
                obj = inst.get_node(data.reference);
            if (inst.is_selected(obj)) {
              var os=inst.get_selected();
              for (var i=0; i<os.length; i++) {
                API.RemoveTreeItem(inst, os[i]);
              }
            } else {
              API.RemoveTreeItem(inst, obj.id);
            }
          }*/
        },
        "rename": {
          "separator_before": false,
          "separator_after": false,
          "_disabled": false, //(this.check("rename_node", data.reference, this.get_parent(data.reference), "")),
          "label": "Rename",
          "action": function (data) {
            var inst = $.jstree.reference(data.reference),
                obj = inst.get_node(data.reference);
            inst.edit(obj);
          }
        },
      }
    };

    $('#tree').jstree({
      'core': {
        'data': function (node, cb) {
          var path = node.id === "#" ? "/" : node.id;
          API.socket.emit(9, path, 1, function (arr) {  // arr [ [path, flags, value], ... ]
            var rez = [];
            for (var i = 0; i < arr.length; i++) {
              var item = {};
              if (arr[i][0] == "/") {
                item.id = "#";
                item.text = window.location.host;
              } else {
                item.id = arr[i][0];  // path
                var idx = item.id.lastIndexOf("/");
                if (idx == -1) {
                  item.text = item.id;
                } else {
                  item.text = item.id.substr(idx + 1);
                }
              }
              item.children = (arr[i][1] & 1) != 0;
              rez.push(item);
            }
            cb(rez);
          });
        },
        'check_callback': true
      },
      'plugins': ["contextmenu", "sort", "state"]
    }).on("create_node.jstree", function (e, data) {
      if (data.node.text == "") {
        return;
      }
      var inst = $.jstree.reference(data.reference);
      var nid = data.parent + "/" + data.node.text;
      API.socket.emit(8, nid, function (succes) {
        if (succes === true) {
          inst.set_id(data.node, nid);
        } else {
          inst.delete_node(data.node);
        }
      });
    }).on("rename_node.jstree", function (e, data) {
      var inst = data.instance;
      if (data.old == "") {
        if (data.text == "") {
          inst.delete_node(data.node);
        } else {
          var nid = data.node.parent + "/" + data.text;
          API.socket.emit(8, nid, function (succes) {
            if (succes === true) {
              inst.set_id(data.node, nid);
            } else {
              inst.delete_node(data.node);
            }
          });
        }
      } else {
        API.socket.emit("rename node", data.node.id, data.text);
      }
    }).on("delete_node.jstree", function (e, data) {

    });
  </script>
</body>
</html>
